#!/usr/local/bin/perl5 -w -I../Solaris/Audio/blib/lib -I../Solaris/Audio/blib/arch
use Solaris::Audio qw(:all);

#
# "A Priori Synthetic"
#
# "Oh yeah? Well, if you like Kant so
# much, why don't you marry him? Things
# lying beyond experience, noumena, are
# unknowable, even though we assume a
# priori knowledge of them?
# A priori, my ass!!"
# - http://www.goats.com/archive/index.html?990625

$frame = shift || 0;
$direct = 1;
$port = 2;
$rate = 16000;
$s = $rate; # one second
$b = ($s * 60) / 80; # one beat (quarter note, really)
$m = $b * 4; # one measure
$|++;

audio_init($direct) or die "Couldn't open audio";
if ($direct) {
audio_set_port($port);
audio_set_rate($rate);
audio_set_gain(100);
}

require "disi.pl";

audio_zero($sintbl, $s);
audio_osc_add($sintbl, $s, 1, 32000);

## Intro (about 0:50)

$over = $b * 3/4;
audio_zero($sound, 2 * $m);
audio_zero($tmp, 2 * $m);

$f = 0;
for ("F-   F   Ab  C+", 
     "C-   E   G   C+",
     "Bb-- F   Bb  C#+",
     "F-   F   A   C+",
     "Ab-- F   Bb  D+",
     "Bb-- G   Bb  Eb+",
     "D-   F#  B   Eb+",
     "G-   F   Bb  0:3:Eb+  3:2:E+",
     "F-   Ab  C+  F+",
     "C-   G   C+  0:2:F+   2:2:E+", 
     "Bb-- Bb  C#+ 0:3:F+   3:2:G+", 
     "F-   A   C+  0:2:A+   2:2:F+",
     "Ab-- D+  F+  0:3:Bb+  3:2:Bb+",
     "Bb-- Eb+ G+  0:2:Bb+  2:2:Eb++",
     "D-   F#+ B+  0:3:Eb++ 3:2:Eb++",
     "G-   F+  Bb+ 0:2:Eb++ 2:2:D++",
     "G-   F+  0:2:Bb+ C++ 3:3:D+ 3:3:B+",
) {
  if (check_frame()) {
    foreach (split) {
      if (/:/) {
	my ($start, $dur, $which) = split /:/;
	long_note($sound, $start*$b, $which, $dur * $b + $over, 800);
      }
      else {
	long_note($sound, 0, $_, $m + $over, 800);
      }
    }
    audio_play($sound, $m);
  }
  audio_zero($sound, $m);
  audio_zero($tmp, 2 * $m);
  audio_move($tmp, 0, $sound, $m, $m);
  $sound = $tmp;
}

$p_dur = $s/8;
audio_zero($snare, $p_dur);
audio_noise($snare, $p_dur);
audio_linear_envs($snare, 0, 0, $p_dur / 100, .04, $p_dur, 0);

audio_zero($shake, $p_dur);
audio_noise($shake, $p_dur);
audio_linear_envs($shake, 0, 0, $p_dur / 2, .02, $p_dur, 0);
audio_zero($shake_env, $p_dur);
audio_osc_add($shake_env, $p_dur, 80, 32000);
audio_table_env($shake, $p_dur, $shake_env, $p_dur);

audio_zero($bass, $p_dur);
audio_omni_drum($bass, $p_dur, $sintbl, $s, 12, 30, 0.5, 1);
audio_scale($bass, $p_dur, 3);
audio_linear_env($bass, 0, 1.0, $p_dur, 0);

poink($p, 800);
poink($pmed, 700);
poink($plo, 600);

for ($i = 0; $i < 3; $i++) {
  audio_add($sound, $m + ($i - 7) * ($b / 5), $snare, $p_dur);
}

if (check_frame()) {
  audio_play($sound, $m - 4 * $b / 5);
}

$b = ($s * 60) / 180; # one beat (quarter note, really)
$m = $b * 4; # one measure

sub make_beat {
  my (@flags) = @_;

  audio_zero($beat, 2 * $m);

  if ($flags[0]) {  
    %note = (l => $plo, 'm' => $pmed, h => $p);
    # @drum_line = qw(l x h x l l x x h x l x h x l x);
    @drum_line = qw(l m h m l l m m h m l m h m l m);
    $i = 0;
    foreach (@drum_line) {
      exists $note{$_} and
	audio_add($beat, $i * $m / 16, $note{$_}, $p_dur);
      $i++;
    }
  }
  if ($flags[1]) {
    %note = ('s' => $snare, 'k' => $shake);
    @drum_line = qw(k x s x s x k x s x k x s x s s);
    $i = 0;
    foreach (@drum_line) {
      exists $note{$_} and
	audio_add($beat, $i * $m / 16, $note{$_}, $p_dur);
      $i++;
    }
  }
  if ($flags[2]) {
    %note = ('b' => $bass);
    @drum_line = qw(b x x x b x x x b x x x b x x x);
    $i = 0;
    foreach (@drum_line) {
      exists $note{$_} and
	audio_add($beat, $i * $m / 16, $note{$_}, $p_dur);
      $i++;
    }
  }
  if ($flags[3]) {
    %note = ('s' => $snare, 'k' => $shake, l => $plo);
    @drum_line = qw(k l x l s l k x k l k l s x s l);
    $i = 0;
    foreach (@drum_line) {
      exists $note{$_} and
	audio_add($beat, $i * $m / 16, $note{$_}, $p_dur);
      $i++;
    }
  }
}

$bass_line_h = sub { my ($z) = @_; [1, $z / 2 + 1 / 4, .5, $z / 4] };
$melody_line_h = sub { my ($z) = @_; [1, $z / 4 + 3 / 8, .75 - $z / 4, .25] };
make_beat(1, 1, 1);

if (check_frame()) {
  audio_zero($sound, 4 * $m);
  audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
  bass_line($sound, qw(C-- G-- C- C-- G-- C- G-- Db--:2 Ab-- Db- Db-- Ab-- Db- Ab-- Gb--
		       C-- G-- C- C--));
  
  audio_play ($sound, 4 * $m);
}


if (check_frame()) {
  audio_zero($sound, 4 * $m);
  audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
  bass_line($sound, qw(C-- G-- C- C-- G-- C- G-- Db--:2 Ab-- Db- Db-- Ab-- Db- Ab-- Gb--
		       C-- G-- C- C-- :1  Db- Db-- :1 D- D-- :1 Eb- Eb-- E-:.5 E--:.5 F--:.4 F-:.6  Db-));

  audio_play ($sound, 4 * $m);
}

sub head {
  my ($ending) = @_;
  audio_zero($sound, 2 * $m);
  audio_table_add($sound, 2 * $m, $beat, $m, 1, 1);
  bass_line($sound, qw(C-- G-- C- C-- G-- C- G-- Db--:2 Ab-- Db- Db-- Ab-- Db-:2 Ab--:.5 Gb--:.5));
  melody_line($sound, ":2", "G B E+:2", ":", "G B E+:1", ":", "F Bb Eb+:9");
  
  if (check_frame()) {
    {
      my $s = $sound;
      lo_cymbal($s, 0, 2 * $m, 2000);
      audio_play($s, 2 * $m);
    }
    audio_play($sound, 2 * $m);
  }

  $theme1 = $sound;
  
  if (check_frame()) {
    audio_zero($sound, 4 * $m);
    audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
    bass_line($sound, qw(C-- G-- C- C-- G-- C- G-- Db--:2 Ab-- Db- Db-- Ab-- Db- Eb-- Ab--
			 Bb--- F-- Bb-- Bb--- F-- Bb-- F-- Bb---:2 F-- Bb-- Bb--- F-- Bb-- C- G--));
    melody_line($sound, ":2", "G B E+:2", ":1", "G B E+:1", ":1", "F Bb Eb+:6", "F Bb Eb+:2", 
		"F A D+:6", "F A D+:2", "F Ab C+:9");
    
    audio_play($sound, 4 * $m);
  }
  
  
  if (check_frame()) {
    for (0..1) {
      audio_play($theme1, 2 * $m);
    }
  }
  
  
  if (check_frame()) {
    audio_zero($sound, 4 * $m);
    audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
    bass_line($sound, qw(C-- G-- C- C-- G-- C- G-- Db--:2 Ab-- Db- Db-- Ab-- Db- Eb-- Ab--
			 Bb--- F-- Bb-- Bb--- F-- Bb-- F-- A---:2 E-- A-- A--- E-- A-- C-- B--));
    melody_line($sound, ":2", "G B E+:2", ":1", "G B E+:1", ":1", "F Bb Eb+:6", "F Bb Eb+:2", 
		"F A D+:6", "F A D+:2", "E A Db+:9");
    
    audio_play($sound, 4 * $m);
  } 
  
  if (check_frame()) {
    audio_zero($sound, 4 * $m);
    audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
    bass_line($sound, qw(E-- B-- E- E-- B-- E- B-- Eb--:2 Bb-- Eb- Eb-- Bb-- Eb- Bb-- Ab--
			 D-- A-- D- D-- A-- D- A-- Db--:2 Ab-- Db- Db-- Ab-- Db- Ab-- Gb-- ));
    melody_line($sound,
		":2", "B E+ G+:2", ":1", "G B E+:1", ":1", "G Db+ F+:6", "G Db+ F+", ":2",
		":2", "A D+ F+:2", ":1", "F A D+:1", ":1", "F Ab+ Eb+:5", "F Ab+ Eb+:2", "F Ab+ B Eb+", ":",
	       );
    audio_play($sound, 4 * $m);
  }
  
  if (check_frame()) {
    audio_zero($sound, 4 * $m);
    audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
    bass_line($sound, qw(C-- G-- C- C-- G-- C- G-- Db--:2 Ab-- Db- Db-- Ab-- Db- Eb-- Ab--
			 C-- G-- C- C-- G-- C- G-- G---:2 D-- G-- G--- D-- G-- D- D--));
    melody_line($sound,
		"G B E+:5", "G B E+:1.75", ":.25", "Gb B Eb+:6", "Gb B Eb+:1.5", ":.5",
		"G B D+:6", "G B D+:1.25", ":.75", "F Bb Eb+:9"
	       );
    audio_play($sound, 4 * $m);
  }
  
  if ($ending >= 1) {
    if (check_frame()) {
      for (0..1) {
	audio_play($theme1, 2 * $m);
      }
    }
    
    if (check_frame()) {
      audio_zero($sound, 4 * $m);
      audio_table_add($sound, 4 * $m, $beat, $m, 1, 1);
      bass_line($sound, qw(D-- A-- D- D-- A-- D- A-- G---:2 D-- G-- G--- D-- G--:3
			   C-- G-- C- C-- G-- C- G-- G---:2 D-- G-- G--- D-- G-- D- D--));
      melody_line($sound,
		  ":2", "Gb B Eb+:2", ":1", "Gb B Eb+:1", ":1", "F Bb Eb+:5",  "F Bb Eb+:2", "F Bb Eb+:2",
		  "E A D+ Gb+:8",
		 );
      audio_play($sound, 4 * $m);
    } 

    if ($ending >= 2 && check_frame()) {
      audio_linear_env($sound, 0, 1, 4 * $m, 0);
      audio_play($sound, 4 * $m);
    }
  }
}

##############################################
head(1);

{
  local *melody_line = alt_melody_line(1600);
  make_beat(1, 1, 0);
  local $bass_line_h = sub { my ($z) = @_; [0, .5 - $z / 2, 0, .5] };
  head(0);
}

{
  local *melody_line = alt_melody_line(800);
  local $bass_line_h = sub { my ($z) = @_; [1, .5 - $z / 2, 0, .5] };
  make_beat(0, 0, 1, 1);
  head(0);
}
##############################################

make_beat(1, 1, 1);
head(2);

audio_destroy();

sub lo_cymbal {
  my ($off, $dur, $amp); 
  (undef, $off, $dur, $amp) = @_;
  my $tmp;
  $amp =  $amp || 1600;
  audio_zero($tmp, $dur);
  audio_zero($tmp2, $dur);
  audio_noise($tmp2, $dur);
  audio_table_iadd($tmp, $dur, $tmp2, $dur, 1/2, 1);
  audio_scale($tmp, $dur, $amp/32000);
  my $attack = $s / 200;
  my $sustain_level = 1/2;
  audio_linear_envs($tmp, 
		    0              => 0,
		    $attack        => 1,
		    $attack * 2    => $sustain_level,
		    $dur - $attack => $sustain_level,
		    $dur           => 0,
		   );

  audio_exp_env($tmp, $dur,  $s );
  audio_add($_[0], $off, $tmp, $dur);
}

sub long_note {
  my ($off, $which, $dur, $amp);
  (undef, $off, $which, $dur, $amp) = @_;
  my $tmp;
  audio_zero($tmp, $dur);
  my $h = 1;
  foreach (qw(.1 .7 .3 .05 .1 0 .05)) {
    audio_table_add($tmp, $dur, $sintbl, $s, $h * tone_of_string($which), $_ * $amp / 32000);
    $h++;
  }
  audio_linear_envs($tmp, 
		    0           => 0,
		    $dur / 4    => 1,
		    3/4 * $dur  => .5,
		    $dur        => 0,
		    );
  audio_add($_[0], $off, $tmp, $dur);
}

sub poink {
  my ($freq) = $_[1];
  audio_zero($_[0], $p_dur);
  my $blur = 40;
  for ($i = 0; $i < $blur; $i++) {
    audio_osc_add($_[0], $p_dur, $freq + $i, 1000 / $blur);
  }
  audio_linear_envs($_[0], 0, 0, $p_dur / 100, 1, $p_dur, 0);
}

sub bass_note {
  my ($off, $which, $dur, $amp, $harm); 
  (undef, $off, $which, $dur, $amp, $harm) = @_;
  my $tmp;
  $amp =  $amp || 1600;
  audio_zero($tmp, $dur);
  my $h = 0;
  foreach(@$harm) {
    $h++;
    audio_osc_add($tmp, $dur, $h * tone_of_string($which), $_ * $amp);
  }
  my $attack = $s / 64;
  my $sustain_level = 1/4;
  audio_linear_env($tmp, 0, 0, $attack , 1);
  audio_linear_env($tmp, $attack, 1, $attack * 2, $sustain_level);
  audio_linear_env($tmp, $attack * 2, $sustain_level, 
		   $dur - $attack, $sustain_level);
  audio_linear_env($tmp, $dur- $attack, $sustain_level, $dur, 0);
  audio_scale($tmp, $dur, 20);
  audio_scale($tmp, $dur, 1/2);
  audio_add($_[0], $off, $tmp, $dur);
}

sub melody_note {
  my ($off, $which, $dur, $amp, $harm); 
  (undef, $off, $which, $dur, $amp, $harm) = @_;
  my $tmp;
  $amp =  $amp || 1600;
  audio_zero($tmp, $dur);
  my $h = 0;
  foreach(@$harm) {
    $h++;
    audio_osc_add($tmp, $dur, $h * tone_of_string($which), $_ * $amp);
  }
  my $attack = $s / 64;
  my $sustain_level = 1/4;
  audio_linear_envs($tmp, 
		    0, 0, 
		    $attack , 1,
		    $attack * 2, $sustain_level,
		    $dur - $attack, $sustain_level,
		    $dur, 0);
  audio_exp_env($tmp, $dur, 3 * $s / 4);
  audio_add($_[0], $off, $tmp, $dur);
}

sub bass_line {
  local *sound = \$_[0]; shift;
  my $i = 0;
  foreach (@_) {
    my ($which, $dur) = split /:/;
    $dur = ($dur || 1) * $b/2;
    $z = 4 * $z * (1 - $z);
    $which and 
      bass_note($sound, $i, $which, $dur, 800, $bass_line_h->($z));
    $i += $dur;
  }
}

sub melody_line {
  local *sound = \$_[0]; shift;
  my $i = 0;
  foreach (@_) {
    my ($chord, $dur) = split /:/;
    $dur = ($dur || 1) * $b / 2;
    foreach(split /\s+/, $chord) {
      $z = 4 * $z * (1 - $z);
      melody_note($sound, $i, $_, $dur, 1600, $melody_line_h->($z));
    }
    $i += $dur;
  }
}

sub alt_melody_line {
  my $amp = shift;
  sub {
    local *sound = \$_[0]; shift;
    my $i = 0;
    foreach (@_) {
      my ($chord, $dur) = split /:/;
      $dur = ($dur || 1) * $b / 2;
      my $j = 0;
      foreach(split /\s+/, $chord) {
	$z = 4 * $z * (1 - $z);
	my $arp = $b/2;
	($dur - $j * $arp > 0) and
	  melody_note($sound, $i + $j * $arp, $_, $dur - $j * $arp, $amp, [0, 0, 1, .5]);
	$j++;
      }
      $j = 0;
      foreach(reverse split /\s+/, $chord) {
	$z = 4 * $z * (1 - $z);
	my $arp = $b/2;
	($dur - $j * $arp > 0) and
	  melody_note($sound, $i + $j * $arp, $_, $dur - $j * $arp, $amp, [1, 1, 1, .5]);
	$j++;
      }
      $i += $dur;
    }
  }
}

sub check_frame {
  my $ret = ($frame <= $f);
  # print "($f)" unless $ret;
  # print "[$f]" if $ret;
  $f++;
  $z = 1 / ($f + 3);
  return $ret;
}

#!/usr/local/bin/perl5 -I../Solaris/Audio/blib/lib -I../Solaris/Audio/blib/arch
use Solaris::Audio qw(:all);

#
# "Depressingly Stupid Machine"
#

$frame = shift || 0;
$f = 0;
$direct = 1;
$port = 2;
$rate = 16000;
$s = $rate; # one second
$b = ($s * 60) / 180; # one beat

$m = $b * 3; # one measure

audio_init($direct) or die "Couldn't open audio";
if ($direct) {
audio_set_port($port);
audio_set_rate($rate);
audio_set_gain(80);
}

require "disi.pl";

audio_zero($sintbl, $s);
audio_osc_add($sintbl, $s, 1, 32000);

audio_zero($bass, $s);
audio_omni_drum($bass, $s, $sintbl, $s, 12, 30, 0.5, 1);
audio_linear_env($bass, 0, 1.0, $s, 0);
audio_scale($bass, $s, .5);

$s_dur = $b / 4;
audio_zero($snare, $s);
audio_zero($tmp, $s);
audio_noise($tmp, $s/4);
audio_linear_env($tmp, 0, .1, $s_dur, 0);
audio_omni_drum($snare, $s_dur, $sintbl, $s,  90, 30, 1, 1);
audio_linear_env($snare, 0, 1, $s_dur, 0);
audio_add($snare, 0, $tmp, $s_dur);
audio_linear_env($snare, 0, .4, $s_dur, .4);
audio_exp_env($snare, $s_dur, $s_dur / 2);
$qsnare = $snare;
audio_linear_env($qsnare, 0, .5, $s_dur, .5);

$| = 1;
#############

sub boing {
  my $i = 0;
  local *sound = \shift;
  my $which = shift;
  my $dur = shift; # in measures
  my $fade_in = shift;
  for (1..$dur) {
    for (0..5) {
      my $w = $which;
      $w .= "+" if ($_ == 1 || $_ == 4);
      $reduc = $fade_in ? ($i / 24) : 1;
      note($sound, $i * $b/2, $w, $b /2, $reduc * 1600, [(2, .25, .25)[$i % 3], ($i%24) / 24, .025, .05, .025 * ($i % 2), .1 * ($i % 2)]);
      $i++;
    }
  }
}

sub perc {
  my $i = 0;
  local *sound = \shift;
  my $dur = shift;
  my $extra = shift;
  my $tmp;
  for (1..$dur) {
    if ($extra) {
      audio_add($sound, ($i+2) * $b / 4, $bass, $s);
      audio_add($sound, ($i+0) * $b / 4, $bass, $s);
    }
    for (0..11) { 
      if ($i % 5 and $i % 3) {
	audio_zero($tmp, $b / 4);
	audio_noise($tmp, $b / 4);
	audio_linear_envs($tmp, 0, 0, $b / 32 , .025, $b/4, 0);
	audio_add($sound, $i * $b/4, $tmp, $b/4);
      }
      $i++;
    }
  }
}

$intro_length = 4;

if (check_frame()) {
  audio_zero ($sound, $m * $intro_length);
  audio_zero ($old_sound, $m * $intro_length);
  foreach (qw(C Bb- Ab- G-)) {
    audio_zero($sound, $m * $intro_length);
    audio_add($sound, 0, $old_sound, $m * $intro_length);
    perc($sound, $intro_length);
    boing($sound, $_, $intro_length, 1);
    boing($old_sound, $_, $intro_length, 0);
    audio_play($sound, $m * $intro_length);
  }
  audio_play($old_sound, $m * $intro_length);
}

if (check_frame()) {
  audio_zero ($sound, $m * $intro_length);
  perc($sound, $intro_length, 1);
  foreach (qw(Db E- G- Bb-)) {
    boing($sound, $_, $intro_length, 0);
    audio_play($sound, $m * $intro_length);
  }
}


if (check_frame()) {
  audio_zero ($sound, $m * $intro_length);
  perc($sound, $intro_length, 1);
  
  boing($sound, "Gb", $intro_length, 0);
  
  audio_play($sound, $m * $intro_length);
}



if (check_frame()) {
 audio_zero($sound, $m * 17);
  perc($sound, 16, 0);
  boing($sound, "Gb", 16, 0);
  for $j (0..3) {
    $i = 0;
    for $seq ("Bb E+", "A Eb+", "Ab D+", "A Eb+") {
      for $which (split /\s+/, $seq) {
	$off = (4 * $j + $i) * $m;
	alt_note($sound, $off, $which, $b/2, 1100, [1, .5. $outer / 4], $s);
	alt_note($sound, $off + .5 * $b, $which, $b/2, 1100, [1, 1, $outer / 4], $s);
	alt_note($sound, $off + 1 * $b, $which, $b/2, 1100, [.5, .5, 1, $outer / 4], $s / 10);
	alt_note($sound, $off + 2 * $b, $which, $b/2, 1100, [1, 1, $outer / 4], $s);
	alt_note($sound, $off + 2.5 * $b, $which, $b/2, 1100, [1, 0, 1, $outer / 4], $s / 10);
      }
      $i++;
    }
  }
  audio_play($sound, 16 * $m);
}


audio_zero($sound, $m * 17);
perc($sound, 16, 0);
boing($sound, "Gb", 16, 0);
for $j (0..3) {
  $i = 0;
  for $seq ("Bb- E", "A- Eb", "Ab- D", "A- Eb") {
      for $which (split /\s+/, $seq) {
	$off = (4 * $j + $i) * $m;
	alt_note($sound, $off, $which, $b/2, 2400, [1, .5. $j / 4], $s);
	alt_note($sound, $off + .5 * $b, $which, $b/2, 2400, [1, 1, $j / 4], $s);
	alt_note($sound, $off + 1 * $b, $which, $b/2, 2400, [.5, .5, 1, $j / 4], $s);
	alt_note($sound, $off + 2 * $b, $which, $b/2, 2400, [1, 1, $j / 4], $s);
	alt_note($sound, $off + 2.5 * $b, $which, $b/2, 2400, [1, 0, 1, $j / 4], $s);
      }
      $i++;
    }
}
if (check_frame()) {
  audio_play($sound, $m * 16);
}

$b_sound = $sound;

if (check_frame()) {
  $sound = $b_sound;
  $i = 0;
  for (0..3) {
    for $seq (qw(Gb--- Gb-  Db- Gb-  E- Gb-
		 Gb--  Gb-- Db- Gb-  E- Gb-
		 Gb--  Gb-  Db- Gb-- E- Gb-
		 Gb--  Gb-  Db- Gb-  E- Gb--)) {
      noise_note($sound, $i * $b / 2, $seq, $b / 2, 3200, [1, 0, .5, .5, .5, .5], 0);
      $i++;
    }
  }
  audio_play($sound, $m * 16);
}


$sound = $b_sound;
$i = 0;
for (0..3) {
  for $seq (qw(Gb--- Gb-  Db- Gb-  E- Gb-
	       Gb--  Gb-- Db- Gb-  E- Gb-
	       Gb--  Gb-  Db- Gb-- E- Gb-
	       Gb--  Gb-  Db- Gb-  E- Gb--)) {
    noise_note($sound, $i * $b / 2, $seq, $b / 2, 3200, [1, 0, .5, .5, .5, .5], !(($i % 7) %3));
    $i++;
  }
}

if (check_frame()) {
  audio_play($sound, $m * 16);
}


$i = 0;
for (0..3) {
  for $seq (qw(Gb Ab- Gb Ab Gb Ab
	       Gb Gb Ab- Gb Ab Gb
	       Ab Ab Gb Ab- Gb Ab
	       Ab Gb Ab Gb Ab- Gb
	      )) {
    noise_note($sound, $i * $b / 2, $seq, $b / 2, 3200, [1, 0, .5, .5, .5, .5], 1);
    $i++;
  }
}

if (check_frame()) {
  audio_play($sound, $m * 16);
}



$i = 0;
for (0..3) {
  for $seq (qw(Bb x Db+ x Bb Bb
	       x Db+ x Bb Bb x
	       Db+ x Bb Bb x Db+
	       x Eb+ x Fb+ x Gb+
	      )) {
    noise_note($sound, $i * $b / 2, $seq, $b / 2, 3200, [1, $_ / 3, .5, .5, .5, .5])
      unless $seq eq "x";
    $i++;
  }
}

if (check_frame()) {
  audio_play($sound, $m * 16);
}


$i = 0;
for (0..3) {
  for $seq (reverse
	    qw(Db+ x Bb Bb
	       x Db+ x Bb Bb x
	       Db+ x Bb Bb x Db+
	       x Eb+ x Fb+ x Gb+ x x
	      )) {
    noise_note($sound, $i * $b / 2, $seq, $b / 2, 3200, [0, 1, .5, 0, .5, .25])
      unless $seq eq "x";
    $i++;
  }
}

if (check_frame()) {
  audio_play($sound, $m * 16);
}

if (check_frame()) {
  audio_zero($sound, $m * 17);
  perc($sound, 16, 0);
  audio_play($sound, $m * 16);
}

################################################

audio_destroy(); 

exit;

# ???
$i = 0;
for (qw(F+ C+ C+ F+ Ab+ C+)) {

  note($sound, $i * $b / 2, $_, $b / 2, 1600, [1, .3, .8, .5, .25, .125, .1, .1, .05]);
  $i++;
}

## Subs

sub note {
  my ($off, $which, $dur, $amp, $harm); 
  (undef, $off, $which, $dur, $amp, $harm) = @_;
  my $tmp;
  $amp =  1600 unless defined $amp;
  audio_zero($tmp, $dur);
  my $h = 0;
  foreach(@$harm) {
    $h++;
    audio_table_add($tmp, $dur, $sintbl, $s, $h * tone_of_string($which), $_ * $amp / 32000);
  }
  
  $attack = $b / 64;
  audio_linear_envs($tmp, 
		    0, 0, 
		    $attack, 1,
		    $dur * 3/4, 1,
		    $dur, 0,
		   );
  

  audio_add($_[0], $off, $tmp, $dur);
}

sub alt_note {
  my ($off, $which, $dur, $amp, $harm, $decay); 
  (undef, $off, $which, $dur, $amp, $harm, $decay) = @_;
  my $tmp;
  $amp =  1600 unless defined $amp;
  $decay = $s / 25 unless defined $decay;
  audio_zero($tmp, $dur);
  my $h = 0;
  foreach(@$harm) {
    $h++;
    audio_table_add($tmp, $dur, $sintbl, $s, $h * tone_of_string($which), $_ * $amp / 32000);
  }
  
  $attack = $b / 64;
  audio_linear_envs($tmp, 
		    0, 0, 
		    $attack, 1,
		    $atack * 2, .5,
		    $dur - $attack, .5,
		    $dur, 0,
		   );
  audio_exp_env($tmp, $dur, $decay);

  audio_add($_[0], $off, $tmp, $dur);
}

sub noise_note {
  my ($off, $which, $dur, $amp, $harm, $hit); 
  (undef, $off, $which, $dur, $amp, $harm, $hit) = @_;
  my $tmp;
  $amp =  1600 unless defined $amp;
  my $decay = $s / 32;
  audio_zero($tmp, $dur);
  my $h = 0;
  foreach(@$harm) {
    $h++;
    audio_table_add($tmp, $dur, $sintbl, $s, $h * tone_of_string($which), $_ * $amp / 32000);
  }
  
  $attack = $b / 64;
  audio_linear_envs($tmp, 
		    0, 0, 
		    $attack, 1,
		    $atack * 2, .5,
		    $dur - $attack, .5,
		    $dur, 0,
		   );
  if ($hit) {
    my $tmp2;
    audio_noise($tmp2, $dur);
    audio_scale($tmp2, $dur, .05);
    audio_exp_env($tmp2, $dur, $decay);
    audio_linear_envs($tmp2, $dur / 2, 1, $dur /2 + $attack, 0, $dur, 0); 
    audio_linear_env($tmp, 0, 0, $dur, 1);
    audio_table_iadd($tmp, $dur, $tmp2, $dur, 1/2, 1);
  }
  audio_add($_[0], $off, $tmp, $dur);
}

sub check_frame {
  my $ret = ($frame <= $f);
   print "($f)" unless $ret;
   print "[$f]" if $ret;
  $f++;
  return $ret;
}

